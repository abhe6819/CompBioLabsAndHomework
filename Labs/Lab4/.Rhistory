x <- 1
source('~/.active-rstudio-document')
guests <- seq(1,9)
chips <- seq(1,5)
#lab step 3
guests <- seq(1,9)
chips <- seq(1,5)
#lab step 3: Made guests and chips variables
guests <- seq(1,9)
chips <- seq(1,5)
chip per guest <- 0.4
chipsperguest <- 0.4
chips <- seq(1,5)
# lab step #3: assigned chip and guests sequences
chips <- seq(1,5)
guests <- seq(1,9)
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #3: assigned chip and guests sequences
chips <- 5
guests <- 8
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #7: calculated leftover chips
leftovers = chips - (chipsperguest * (guests + 1))
# lab step #7: calculated leftover chips
chips - (chipsperguest * (guests + 1))
# lab step #3: assigned chip and guests sequences
chips <- 5
guests <- 8
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #7: calculated leftover chips
chips - (chipsperguest * (guests + 1))
# lab step #8: assigned rankings as vectors
self <- c(7,9,8,1,2,3,4,6,5)
Penny <- c(5,9,8,3,1,2,4,7,6)
Lenny <- c(6,5,4,9,8,7,3,2,1)
Stewie <- c(1,9,5,6,8,7,2,3,4)
# lab step #9: make variables for episode IV
PennyIV <- Penny[4]
LennyIV <- Lenny[4]
# lab step #10: combined rankings into one table
Rankings <- cbind(self,Penny,Lenny,Stewie)
str(PennyIV) #one rank
str(Penny) #all one persons rankings
str(Rankings) #all rankings
str(PennyIV) # lab step #12: one rank
str(Penny) #all one persons rankings
str(Rankings) #all rankings
str(PennyIV) # lab step #11: one rank
# lab step #12: make data frame out of vectors
data.frame(self,Penny,Lenny,Stewie)
as.data.frame(Rankings)
Rankingstable <- as.data.frame(Rankings)
dim(Rankings)
dim(Rankingstable)
str(Rankings)
str(Rankingstable)
Rankings == Rankingstable
typeof(Rankings)
typeof(Rankingstable)
# lab step #13: (a) and (b) both contain the same info, but (b) is formatted as a table and (a) is a string of vectors
Episodes <- c("I","II","III","IV","V","VI","VII","VIII","IX")
# lab step #13: (a) and (b) both contain the same info, but (b) is formatted as a table and (a) is a string of vectors
# lab step #14: episode vector
Episodes <- c("I","II","III","IV","V","VI","VII","VIII","IX")
help("row.names")
row.names(Rankingstable) <- Episodes
row.names(Rankings) <-Episodes
View(Rankingstable)
View(Rankings)
# lab step #15: naming rows with episodes
row.names(Rankingstable) <- Episodes
row.names(Rankings) <-Episodes
Rankings(3,)
# Lab step #16: access Rankings row three
Rankings[3,]
# lab step #17:access Rankingstable column four
Rankingstable[,4]
# lab step #18: access your V Ranking
Rankings[5,1]
# lab step #19:access penny's II Rank
Rankings[2,2]
# Lab step #20: everyone's IV-VI rank
Rankings[4-6,]
# Lab step #20: everyone's IV-VI rank
Rankings[4:6,]
# lab step #21: II,V,VII ranks
Rankings[c(2,5,7),]
# lab step #22: Penny and stewie, episodes IV and VI
Rankings[c(4,6),c(2,4)]
# lab step #23: switch Lenny II and V
LV <- Rankings[5,3]
Rankings[5,3] <- Rankings[2,3]
Rankings[2,3] <- LV
# lab step #24: using row/column labels
Rankings["III","Penny"]
Rankingstable["III","Penny"]
LV <- Rankings["V","Lenny"]
Rankings["V","Lenny"] <- Rankings["II","Lenny"]
Rankings["II","Lenny"] <- LV
# lab step #26: re-do #23
LV <- Rankings["V","Lenny"]
LV <- Rankings["V","Lenny"]
Rankings["V","Lenny"] <- Rankings["II","Lenny"]
Rankings["II","Lenny"] <- LV
for ( i in seq(1,10)) {
print("hi")
}
# lab step 2: calculating how much money Tim has for the next 8 weeks
initialMoney <- 10   # starting value in piggy bank
gumCost <- 1.34 # cost of one pack of gum
allowance <- 5      # weekly allowance
week <- seq(1,8)    # week number
gumPacks <- 2       # packs of gum per week
#calculations
for (i in week) {
initialMoney + allowance - (gumCost * gumPacks)
}
for (i in week) {
initialMoney + allowance - (gumCost * gumPacks)
print
}
for (i in week) {
initialMoney + allowance - (gumCost * gumPacks)
print(week)
}
#calculations
for (i in week) {
funds <- initialMoney + allowance - (gumCost * gumPacks)
print(funds)
}
#calculations
for (i in week) {
funds <- initialMoney + week * (allowance - (gumCost * gumPacks))
print(funds)
}
#calculations
for (i in week) {
funds <- initialMoney + (week * (allowance - (gumCost * gumPacks)))
print(funds)
}
#calculations
for (i in 1:8) {
funds <- initialMoney + (week * (allowance - (gumCost * gumPacks)))
print(funds)
}
}
#calculations
for (i in seq(1,8)) {
funds <- initialMoney + (week * (allowance - (gumCost * gumPacks)))
print(funds)
}
funds <- initialMoney + (week * (allowance - (gumCost * gumPacks)))
#display results
print(funds)
#calculations for 8 weeks
for (i in seq(1,8)) {
funds <- initialMoney + (gumCost * gumPacks)
}
#calculations for 8 weeks
for (i in seq(1,8)) {
funds <- initialMoney + (gumCost * gumPacks)
print (funds)
}
#calculations for 8 weeks
for (week in seq(1,8)) {
funds <- initialMoney + week * (gumCost * gumPacks)
print (funds)
}
#parameters
initialPop <- 2000 #initial population size
decayRate <- 0.05  #population decay per year
#calculations
for (year in seq(1,7)) {
population <- initialPop - (decayRate * year)
print (population)
}
#calculations
for (year in seq(1,7)) {
population <- initialPop * (decayRate * year)
print (population)
}
#calculations
for (year in seq(1,7)) {
population <- initialPop * (initialPop * (decayRate * year))
print (population)
}
#calculations
for (year in seq(1,7)) {
population <- initialPop - (initialPop * (decayRate * year))
print (population)
}
#parameters
initAbundance <- 2500 #initial population: n[1]
carryingCapacity <- 10000 # carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(1,12)) {
abundance <- abundance[time - 1] + (growthRate * abundance[time - 1] * (carryingCapacity - abundance[time - 1]) / carryingCapacity)
print (abundance)
}
intialAbundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(1,12)) {
abundance <- abundance[time - 1] + (growthRate * abundance[time - 1] * (carryingCapacity - abundance[time - 1]) / carryingCapacity)
print (abundance)
abundance[1] <- initAbundance
}
#calculation
for (time in seq(1,12)) {
abundance <- abundance[time - 1] + (growthRate * abundance[time - 1] * (carryingCapacity - abundance[time - 1]) / carryingCapacity)
print (time)
abundance[1] <- initAbundance
}
Abundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(1,12)) {
Abundance[time] <- Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity)
print (time)
}
#calculation
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity)
print (time)
}
#calculation
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity)
print (time)
Abundance[1] <- 2500
}
#calculation
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity)
print (time)
Abundance[2] <- 2500
}
initAbundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(2,12)) {
Abundance[time] <- initAbundance -(Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity))
print (time)
}
#calculation
for (time in seq(1,12)) {
Abundance[time] <- initAbundance -(Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity))
print (time)
}
#calculation
for (time in seq(2,12)) {
Abundance[time] <- initAbundance -(Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity))
print (Abundance)
}
#calculation
for (time in seq(2,12)) {
Abundance[time] <- initAbundance - (Abundance[time - 1] + (growthRate * Abundance[time - 1] * (carryingCapacity - Abundance[time - 1]) / carryingCapacity))
print (Abundance)
}
n[0] <- 2500     #initial population
K <- 10000 #carrying capacity of population
r <- 0.8         #intrinsic growth rate of population
#calculation
for (time in seq(1,12)) {
n[time] <- n[time-1] + (r * n[time-1] * (K - n[time-1])/K)
print (n[time])
}
#calculation
for (time in seq(1,12)) {
n <- n[time-1] + (r * n[time-1] * (K - n[time-1])/K)
print (n)
}
#calculation
for (time in seq(1,12)) {
n[time] <- n[time-1] + (r * n[time-1] * (K - n[time-1])/K)
print (n)
}
n <- 2500     #initial population
K <- 10000 #carrying capacity of population
r <- 0.8         #intrinsic growth rate of population
#calculation
for (time in seq(1,12)) {
n[time] <- n[time-1] + (r * n[time-1] * (K - n[time-1])/K)
print (n[time])
}
#calculation
for (time in seq(2,12)) {
n[time] <- n[time-1] + (r * n[time-1] * (K - n[time-1])/K)
print (n[time])
}
intialAbundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(2,12)) {
initAbundance[time] <- initAbundance[time-1] + (growthRate * initAbundance[time-1] * (carryingCapacity - initAbundance[time-1])/K)
print (initAbundance[time])
}
# lab step 5a: make vector with 18 zeros
zeros <- rep(0, 18)
# lab step 5b: multiply a 1-18 sequence by 3
for ( i in seq(1,18)) {
zeros <- i * 3
}
# lab step 5c: repeat 5a and replace first entry with 1
morezeros <- rep(0, 18)
intitAbundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(2,12)) {
initAbundance[time] <- initAbundance[time-1] + (growthRate * initAbundance[time-1] * (carryingCapacity - initAbundance[time-1])/K)
print (initAbundance[time])
}
# lab step 5b: multiply a 1-18 sequence by 3
for ( i in seq(1,18)) {
zeros[i] <- i * 3
}
replace(morezeros, 1, 1)
# lab step 5d: morezeros value is 1 + (2 * previous entry)
for (i in 2:10) {
morezeros[i] <- 1 + (2 * morezeros[i-1])
}
print (morezeros)
# lab step 5c: repeat 5a and replace first entry with 1
morezeros <- rep(0, 18)
replace(morezeros, 1, 1)
for (i in 2:10) {
morezeros[i] <- 1 + (2 * morezeros[i-1])
}
print (morezeros)
# lab step 5c: repeat 5a and replace first entry with 1
morezeros <- rep(0, 18)
replace(morezeros, 1, 1)
morezeros
morezeros <- rep(0, 18)
morezeros <- replace(morezeros, 1, 1)
# lab step 5d: morezeros value is 1 + (2 * previous entry)
for (i in 2:18) {
morezeros[i] <- 1 + (2 * morezeros[i-1])
}
print (morezeros)
# lab step 6: make the first 20 numbers of the Fibonacci sequence with a loop
Fibonacci <- rep(0,20)
Fibonacci <- replace(Fibonacci,2,1)
for (i in 3:20) {
Fibonacci[i] <- Fibonacci[i-1] + Fibonacci[i-2]
}
print (Fibonacci)
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
plot(Abundance,timeStep4)
Abundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
print (Abundance[time])
timeStep4 <- seq(1,12)
plot(Abundance,timeStep4)
timeStep4 <- seq(1,12)
plot(Abundance,timeStep4)
plot(timeStep4,Abundance)
plot(timeStep4,Abundance)
print(Abundance)
Abundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
print (Abundance[time])
}
#}
}
Abundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculation
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
print (Abundance[time])
}
plot(timeStep4,Abundance)
# lab step 7: redo step 4 and store data (abundance is already stored as a vector)
#see step 4 for parameters and calculations
timeStep4 <- seq(1,12)
# lab step 8a: read data files into R
setwd (~/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
# lab step 8a: read data files into R
setwd (~winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
# lab step 8a: read data files into R
setwd (winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
pwd
getwd
list.files(Labs4)
# lab step 8a: read data files into R
setwd (~/winhome)
# lab step 8a: read data files into R
setwd (~)
# lab step 8a: read data files into R
getwd
# lab step 8a: read data files into R
setwd("help")
# lab step 8a: read data files into R
setwd
# lab step 8a: read data files into R
setwd(/home/ahein/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
# lab step 8a: read data files into R
setwd (home/ahein/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4/)
# lab step 8a: read data files into R
setwd home/ahein/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4/
# lab step 8a: read data files into R
setwd (home/ahein/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4/)
# lab step 8a: read data files into R
setwd (home/ahein/)
# lab step 8a: read data files into R
setwd (home/ahein/
# lab step 8a: read data files into R
setwd (home/ahein/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4
)
)
# lab step 8a: read data files into R
setwd (home/ahein/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4
)
~ <- getwd(Labs)
~ <- getwd(~)
# lab step 8a: read data files into R
setwd (home/ahein/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
# lab step 8a: read data files into R
setwd (~/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
# lab step 8a: read data files into R
setwd (/home/ahein/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4)
# lab step 8a: read data files into R
setwd ("/home/ahein/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4")
list.files
# lab step 8a: read data files into R
setwd ("/home/ahein/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4")
# lab step 8a: read data files into R
setwd ("/~/winhome/Documents/EBIO4420/CompBioLabsandHomework/Labs/Lab4")
getwd
getwd("home")
getwd(home)
getwd()
# lab step 8a: read data files into R
setwd ("/EBIO4420/CompBioLabsandHomework/Labs/Lab4")
# lab step 8a: read data files into R
setwd ("EBIO4420/CompBioLabsandHomework/Labs/Lab4")
getwd()
read.csv(CO2_data_cut_paste)
read.csv(CO2_data_cut_paste.csv)
read.csv("CO2_data_cut_paste")
read.csv("CO2_data_cut_paste.csv")
read.csv("help")
