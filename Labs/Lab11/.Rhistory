x <- 1
source('~/.active-rstudio-document')
guests <- seq(1,9)
chips <- seq(1,5)
#lab step 3
guests <- seq(1,9)
chips <- seq(1,5)
#lab step 3: Made guests and chips variables
guests <- seq(1,9)
chips <- seq(1,5)
chip per guest <- 0.4
chipsperguest <- 0.4
chips <- seq(1,5)
# lab step #3: assigned chip and guests sequences
chips <- seq(1,5)
guests <- seq(1,9)
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #3: assigned chip and guests sequences
chips <- 5
guests <- 8
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #7: calculated leftover chips
leftovers = chips - (chipsperguest * (guests + 1))
# lab step #7: calculated leftover chips
chips - (chipsperguest * (guests + 1))
# lab step #3: assigned chip and guests sequences
chips <- 5
guests <- 8
# lab step #5: assigned chips eaten per guest
chipsperguest <- 0.4
# lab step #7: calculated leftover chips
chips - (chipsperguest * (guests + 1))
# lab step #8: assigned rankings as vectors
self <- c(7,9,8,1,2,3,4,6,5)
Penny <- c(5,9,8,3,1,2,4,7,6)
Lenny <- c(6,5,4,9,8,7,3,2,1)
Stewie <- c(1,9,5,6,8,7,2,3,4)
# lab step #9: make variables for episode IV
PennyIV <- Penny[4]
LennyIV <- Lenny[4]
# lab step #10: combined rankings into one table
Rankings <- cbind(self,Penny,Lenny,Stewie)
str(PennyIV) #one rank
str(Penny) #all one persons rankings
str(Rankings) #all rankings
str(PennyIV) # lab step #12: one rank
str(Penny) #all one persons rankings
str(Rankings) #all rankings
str(PennyIV) # lab step #11: one rank
# lab step #12: make data frame out of vectors
data.frame(self,Penny,Lenny,Stewie)
as.data.frame(Rankings)
Rankingstable <- as.data.frame(Rankings)
dim(Rankings)
dim(Rankingstable)
str(Rankings)
str(Rankingstable)
Rankings == Rankingstable
typeof(Rankings)
typeof(Rankingstable)
# lab step #13: (a) and (b) both contain the same info, but (b) is formatted as a table and (a) is a string of vectors
Episodes <- c("I","II","III","IV","V","VI","VII","VIII","IX")
# lab step #13: (a) and (b) both contain the same info, but (b) is formatted as a table and (a) is a string of vectors
# lab step #14: episode vector
Episodes <- c("I","II","III","IV","V","VI","VII","VIII","IX")
help("row.names")
row.names(Rankingstable) <- Episodes
row.names(Rankings) <-Episodes
View(Rankingstable)
View(Rankings)
# lab step #15: naming rows with episodes
row.names(Rankingstable) <- Episodes
row.names(Rankings) <-Episodes
Rankings(3,)
# Lab step #16: access Rankings row three
Rankings[3,]
# lab step #17:access Rankingstable column four
Rankingstable[,4]
# lab step #18: access your V Ranking
Rankings[5,1]
# lab step #19:access penny's II Rank
Rankings[2,2]
# Lab step #20: everyone's IV-VI rank
Rankings[4-6,]
# Lab step #20: everyone's IV-VI rank
Rankings[4:6,]
# lab step #21: II,V,VII ranks
Rankings[c(2,5,7),]
# lab step #22: Penny and stewie, episodes IV and VI
Rankings[c(4,6),c(2,4)]
# lab step #23: switch Lenny II and V
LV <- Rankings[5,3]
Rankings[5,3] <- Rankings[2,3]
Rankings[2,3] <- LV
# lab step #24: using row/column labels
Rankings["III","Penny"]
Rankingstable["III","Penny"]
LV <- Rankings["V","Lenny"]
Rankings["V","Lenny"] <- Rankings["II","Lenny"]
Rankings["II","Lenny"] <- LV
# lab step #26: re-do #23
LV <- Rankings["V","Lenny"]
LV <- Rankings["V","Lenny"]
Rankings["V","Lenny"] <- Rankings["II","Lenny"]
Rankings["II","Lenny"] <- LV
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
return (Abundance[time])
}
}
# lab step 3a: paste lab 4, #7 script to lab 8
# equation: n[t] = n[t-1] + (r * n[t-1] * (K - n[t-1])/K)
#parameters
Abundance <- 2500     #initial population: n[1]
carryingCapacity <- 10000 #carrying capacity of population: K
growthRate <- 0.8         #intrinsic growth rate of population: r
#calculations
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
print (Abundance[time])
}
#plot data
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
return (Abundance[time])
}
}
#calculations
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
print (Abundance[time])
}
#calculations
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
return (Abundance[time])
}
}
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
}
return (Abundance[time])
}
return (Abundance)
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/K)
}
return (Abundance[time])
}
MyPopulationFunction(2000, 10000, 0.8)
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
}
return (Abundance[time])
}
MyPopulationFunction(2000, 10000, 0.8)
#calculations
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
MyPopulationFunction(2000, 10000, 0.8)
MyPopulationFunction(2500, 10000, 0.8)
Abundance[time]
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
return (Abundance[time])
}
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
}
return (Abundance[time])
}
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3b: make 3a into function
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
return (Abundance[time])
}
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
#test function
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
(Abundance[time])
}
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
#test function
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
#test function
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(time) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep4 <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
#test function
MyPopulationFunction(2500, 10000, 0.8)
# lab step 3d: write code that calls the function
? call
# lab step 3d: write code that calls the function
call ("MyPopulationFunction")
# lab step 3d: write code that calls the function
call ("MyPopulationFunction", Abundance, carryingCapacity, growthRate)
# lab step 3d: write code that calls the function
call ("MyPopulationFunction")
# lab step 3d: write code that calls the function
call ("MyPopulationFunction",2500, 10000, 0.8)
MyPopulationFunction(2, 6, .2)
call("MyPopulationFunction",2, 6, .2)
# lab step 3d: call the function
#test function
MyPopulationFunction(2300, 19000, 0.3)
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
# lab step 3d: call the function
#test function
MyPopulationFunction(2300, 19000, 0.3)
# lab step 3e: write dataset from function to file with headers
print(Abundance)
# lab step 3e: write dataset from function to file with headers
as.matrix(Abundance)
colnames(Abundance) <- c("generations", "abundance")
print(Abundance)
# lab step 3e: write dataset from function to file with headers
AbundanceMatrix <- as.matrix(Abundance)
colnames(Abundance) <- c("generations", "abundance")
# lab step 3e: write dataset from function to file with headers
AbundanceMatrix <- as.data.frame(Abundance)
colnames(Abundance) <- c("generations", "abundance")
colnames(Abundance) <- ("generations", "abundance")
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep <- seq(1,12)
plot(timeStep4,Abundance)
return (Abundance[time])
}
str(Abundance)
# lab step 3e: write dataset from function to file with headers
AbundanceMatrix <- as.matrix(Abundance)
length(Abundance)
dim(Abundance)
dim(AbundanceMatrix)
# lab step 3e: write dataset from function to file with headers
AbundanceMatrix <- as.matrix(Abundance)
colnames(AbundanceMatrix) <- c("generations", "abundance")
rownames(AbundanceMatrix) <- c("generations", "abundance")
# lab step 3c: add to function to make it plot the data
MyPopulationFunction <- function(Abundance, carryingCapacity, growthRate) {
for (time in seq(2,12)) {
Abundance[time] <- Abundance[time-1] + (growthRate * Abundance[time-1] * (carryingCapacity - Abundance[time-1])/carryingCapacity)
print (Abundance[time])
}
timeStep <- seq(1,12)
plot(timeStep,Abundance)
return (Abundance[time])
}
AbundanceMatrix <- cbind(timestep, AbundanceMatrix)
AbundanceMatrix <- cbind(seq(1,12), AbundanceMatrix)
dim(AbundanceMatrix)
rownames(AbundanceMatrix) <- c("generations", "abundance")
rownames(AbundanceMatrix) <- c("generations", "abundance")
colnames(AbundanceMatrix) <- c("generations", "abundance")
dim(AbundanceMatrix)
print(AbundanceMatrix)
#export to file
write.csv(AbundanceMatrix, "logisticGrowthData")
#export to file
write.csv(AbundanceMatrix, "logisticGrowthData.csv")
# lab step 3: read denisty data into R
WoodDensity <- read.csv (file = "GlobalWoodDensityDatabase-Data.csv", stringsAsFactors = F)
names(WoodDensity)[4] <- "Density" #Renamed col 4 which did not translate well into R
getwd()
setwd("EBIO4420/CompBioLabsandHomework/Labs/Lab11")
# lab step 3: read denisty data into R
WoodDensity <- read.csv (file = "GlobalWoodDensityDatabase-Data.csv", stringsAsFactors = F)
names(WoodDensity)[4] <- "Density" #Renamed col 4 which did not translate well into R
which(is.na(WoodDensity$Density))
#using base R
DensityCompressed2 <- unique (DensityNoNA$Binomial)
# lab step 3: read denisty data into R
WoodDensity <- read.csv (file = "GlobalWoodDensityDatabase-Data.csv", stringsAsFactors = F)
names(WoodDensity)[4] <- "Density" #Renamed col 4 which did not translate well into R
# lab step 4a: find NA value in WoodDensity
which(is.na(WoodDensity$Density))
# lab step 4b: remove NA row
DensityNoNA <- drop_na(WoodDensity)
# lab step 5: compress data so that each species is only listed once
library("dplyr") #access dplyr library
DensityCompressed <- summarise(group_by(DensityNoNA,Binomial,Family), MeanDensity = mean(Density))
#using base R
install.packages("lubridate")
install.packages("dplyr")
library("dplyr")
# lab step 3: read denisty data into R
WoodDensity <- read.csv (file = "GlobalWoodDensityDatabase-Data.csv", stringsAsFactors = F)
names(WoodDensity)[4] <- "Density" #Renamed col 4 which did not translate well into R
# lab step 4a: find NA value in WoodDensity
which(is.na(WoodDensity$Density))
# lab step 4b: remove NA row
library("dplyr") #access dplyr library
DensityNoNA <- drop_na(WoodDensity)
# lab step 5: compress data so that each species is only listed once
DensityCompressed <- summarise(group_by(DensityNoNA,Binomial,Family), MeanDensity = mean(Density))
#using base R
# lab step 4a: find NA value in WoodDensity
which(is.na(WoodDensity$Density))
DensityNoNA <- drop_na(WoodDensity)
# lab step 4b: remove NA row
library("tidyr") #access dplyr library
DensityNoNA <- drop_na(WoodDensity)
DensityCompressed <- summarise(group_by(DensityNoNA,Binomial,Family), MeanDensity = mean(Density))
#using base R
DensityCompressed2 <- unique (DensityNoNA$Binomial)
head(DensityCompressed2)
str(DensityCompressed2)
DensityCompressed3 <- for(ii in 1:nrow(DensityNoNA)) {
if (duplicated(DensityNoNA$Binomial)) (mean(DensityNoNA$Density)
)
}
for(ii in 1:nrow(DensityNoNA)) {
if (duplicated(DensityNoNA$Binomial)) (mean(DensityNoNA$Density)
)
}
unique(DensityNoNA$Binomial)
for(ii in 1:nrow(DensityNoNA)) {
if (unique(DensityNoNA$Binomial)==F) (mean(DensityNoNA$Density)
)
}
#using base R
DensityCompressed2 <- sort(unique (DensityNoNA$Binomial))
NumSpecies <- length(DensityCompressed2)
#using base R
TreeSpecies <- sort(unique (DensityNoNA$Binomial))
NumSpecies <- length(TreeSpecies)
DensityCompressed2 <- data.frame (Binomial = TreeSpecies,
Family = rep("", NumSpecies),
Density = rep(0, NumSpecies))
for (ii in 1:nrow(DensityNoNA)) {
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[i]]
}
for (ii in 1:nrow(DensityNoNA)) {
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
TreeSpecies <- sort(unique (DensityNoNA$Binomial))
NumSpecies <- length(TreeSpecies)
DensityCompressed2 <- data.frame (Binomial = TreeSpecies,
Family = rep("", NumSpecies),
Density = rep(0, NumSpecies))
for (ii in 1:nrow(DensityNoNA)) {
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
DensityCompressed2 <- data.frame (Binomial = TreeSpecies,
Family = rep("", NumSpecies),
Density = rep(0, NumSpecies),
stringsAsFactors = F)
for (ii in 1:nrow(DensityNoNA)) {
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
for (ii in 1:nrow(DensityNoNA)) {
Species <- TreeSpecies[i]
rows <- which(DensityNoNA$BBinomial == Species)
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
{
Species <- TreeSpecies[ii]
rows <- which(DensityNoNA$BBinomial == Species)
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
for (ii in 1:nrow(DensityNoNA)) {
Species <- TreeSpecies[ii]
rows <- which(DensityNoNA$BBinomial == Species)
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
View(DensityCompressed2)
for (ii in 1:nrow(DensityNoNA)) {
Species <- TreeSpecies[ii]
rows <- which(DensityNoNA$Binomial == Species)
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
for (ii in 2:nrow(DensityNoNA)) {
Species <- TreeSpecies[ii]
rows <- which(DensityNoNA$Binomial == Species)
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
for (ii in 2:nrow(DensityNoNA)) {
Species <- TreeSpecies[ii]
rows <- which(DensityNoNA$Binomial == Species)
DensityCompressed2$Density[ii] <- mean(DensityNoNA$Density[TreeSpecies[ii]])
DensityCompressed2$Family[ii] <- DensityNoNA$Family[TreeSpecies[ii]]
}
#using base R
TreeSpecies <- sort(unique (DensityNoNA$Binomial)) #list of species
NumSpecies <- length(TreeSpecies) # number of unique species
#using base R
TreeSpecies <- sort(unique (DensityNoNA$Binomial)) #list of species
#using base R
TreeSpecies <- sort(unique (DensityNoNA$Binomial)) #list of species
#using base R
TreeSpecies <- sort(unique (DensityNoNA$Binomial)) #list of species
